{"version":3,"sources":["Chart.js","BookResults.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["Chart","react_default","a","createElement","className","es","data","labels","this","props","years","datasets","label","fill","lineTension","backgroundColor","borderColor","ratings","options","responsive","legend","display","title","text","scales","yAxes","ticks","max","scaleLabel","labelString","xAxes","Component","scrollToElement","require","BookResults","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getData","author","axios","url","dataResponse","paramsSerializer","params","Qs","stringify","arrayFormat","reqUrl","concat","q","key","proxyHeaders","header_params","xmlToJSON","then","res","offset","ease","duration","works","GoodreadsResponse","search","results","work","sortedByAvg","filter","original_publication_year","hasOwnProperty","sortedByYear","sort","b","comparison","average_rating","map","book","avgRatings","setState","yearsArray","ratingsArray","highBook","id","state","length","best_book","year","avgRating","cover","img_url","lowBook","getDescAndUrl","text_only","desc","link","ratings_count","reviews","text_reviews_count","talkScore","toFixed","description","starRatingCount","textReviewCount","onClick","e","defineProperty","target","activeOne","activeTwo","activeThree","activeFour","authorSubmit","prevProps","value","dangerouslySetInnerHTML","__html","onClickTwo","src_Chart","Link","to","withRouter","Form","onSubmit","handleSubmit","history","action","htmlFor","onChange","handleChange","authorSearch","type","placeholder","required","App","preventDefault","push","_this2","BrowserRouter","class","src_Form","Route","path","render","src_BookResults","href","Boolean","window","location","hostname","match","ReactDOM","src_App_1","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b12181a3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Line} from \"react-chartjs-2\";\n\nclass Chart extends Component{\n    render(){\n        return(\n            <div>\n                <div className=\"chart\">                \n                   <Line data={{\n                            labels: this.props.years,\n                            datasets: [{\n                                label: 'Average Rating per Year',\n                                fill: false,\n                                lineTension: 0.1,\n                                backgroundColor: '#e0e2e2',\n                                borderColor: '#ea4136',\n                                data: this.props.ratings\n                            }]\n                        }}\n\n                        options = {{\n                            responsive: true,\n                            legend: {\n                                display:false\n                            },\n                            // tooltips: {\n                            //     callbacks: {\n                            //         label: (tooltipItem, data) => {\n                            //             // data for manipulation\n                            //             return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\n                            //         },\n                            //     },\n                            // },\n                            title: {\n                                display: true,\n                                text: 'Average Rating per Publication Year'\n                            },\n                            scales: {\n                                yAxes: [{\n                                    ticks: {\n                                        //beginAtZero: true,\n                                        max: 5\n                                    },\n                                    scaleLabel: {\n                                    display: true,\n                                    labelString: \"Average Rating\",\n                                    },\n                                }],\n                                xAxes: [{\n                                    scaleLabel: {\n                                        display: true,\n                                        labelString: \"Original Publication Year\",\n                                    },\n                                }]\n                            }}\n                            \n                         }\n                    />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Chart;","import React, { Component } from 'react';\nimport { Link, withRouter, Redirect} from 'react-router-dom';\nimport './App.css';\nimport Chart from \"./Chart.js\";\nimport axios from \"axios\";\nimport Qs from 'qs';\n\nconst scrollToElement = require('scroll-to-element');\nscrollToElement('#id');\n\nclass BookResults extends Component {\n    constructor() {\n        super();\n        this.state = ({\n            sortedByAvg: [],\n            yearsArray: [],\n            ratingsArray:[],\n            highBook: {\n                id: 0,\n                title: \"\",\n                year: 0,\n                description: \"\",\n                avgRating: 0,\n                cover: \"\",\n                url: \"\",\n                starRatingCount: 0,\n                textReviewCount: 0,\n                talkScore: 0\n            },\n            lowBook: {\n                id: 0,\n                title: \"\",\n                year: 0,\n                description: \"\",\n                avgRating: 0,\n                cover: \"\",\n                url: \"\",\n                starRatingCount: 0,\n                textReviewCount: 0,\n                talkScore: 0\n            },\n            activeOne: false,\n            activeTwo: false,\n            activeThree: false,\n            activeFour: false\n        })\n    }   \n\n    componentDidMount() {\n        this.getData(this.props.authorSubmit);\n    }\n\n    //  first Axios call, setting\n    getData = (author) => {\n        axios({\n            url: 'https://proxy.hackeryou.com',\n            dataResponse: 'json',\n            paramsSerializer: function (params) {\n                return Qs.stringify(params, { arrayFormat: 'brackets' })\n            },\n            params: {\n                reqUrl: `https://www.goodreads.com/search?q=${author}&search[field]=author&format=xml&key=dRJuutBqKWVrrJUND8jbmQ`,\n                params: {\n                    q: author,\n                    key: 'dRJuutBqKWVrrJUND8jbmQ',\n                    //search: \"author\",\n                },\n                proxyHeaders: {\n                    'header_params': 'value'\n                },\n                xmlToJSON: true\n            }\n        }).then(res => {      \n\n            scrollToElement('.card', {\n                offset: 0,\n                ease: 'outCube',\n                duration: 1500\n            });\n            \n            // array of 20 works by searched author\n            const works = res.data.GoodreadsResponse.search.results.work  \n            \n            // handle refreshes in chrome!!\n            // if (works === undefined) {\n            //     //history.push(\"/\");\n            //     <Redirect to={{pathname:\"/\"}} />\n            // }\n            \n            // filter out any element in works that does not contain a valid publication year in two new arrays\n            const sortedByAvg = works.filter(work => work.original_publication_year.hasOwnProperty(\"$t\"));\n\n            const sortedByYear = works.filter(work => work.original_publication_year.hasOwnProperty(\"$t\"));\n                               \n            sortedByAvg.sort((a,b) => {\n                let comparison = 0;\n\n                if (a.average_rating > b.average_rating ) {\n                    comparison = 1;\n                } else if (a.average_rating < b.average_rating) {\n                    comparison = -1;\n                }\n                return comparison\n            })\n\n            sortedByYear.sort((a, b) => {\n                let comparison = 0;\n\n                if (a.original_publication_year[\"$t\"] > b.original_publication_year[\"$t\"]) {\n                    comparison = 1;\n                } else if (a.original_publication_year[\"$t\"] < b.original_publication_year[\"$t\"]) {\n                    comparison = -1;\n                }\n                return comparison\n            })\n                    \n            // initialize array of JUST years...\n            const years = sortedByYear.map(book => {\n                return book.original_publication_year[\"$t\"]\n            })\n            \n            // ...and an array of JUST avg ratings to pass to the Chart\n            const avgRatings = sortedByYear.map(book => {\n                return book.average_rating\n            })\n            \n            //set state with sorted array and chart data\n            this.setState({\n                sortedByAvg: sortedByAvg,\n                yearsArray: years,\n                ratingsArray: avgRatings\n                }\n            )\n            \n            // set state from API info. take the lowest (first) and highest (last) rated books\n            this.setState(\n                {\n                    highBook: {\n                        id: this.state.sortedByAvg[this.state.sortedByAvg.length - 1].best_book.id[\"$t\"],\n                        title: this.state.sortedByAvg[this.state.sortedByAvg.length - 1].best_book.title,\n                        year: this.state.sortedByAvg[this.state.sortedByAvg.length - 1].original_publication_year[\"$t\"],\n                        avgRating: this.state.sortedByAvg[this.state.sortedByAvg.length - 1].average_rating,\n                        cover: this.state.sortedByAvg[this.state.sortedByAvg.length - 1].best_book.img_url\n                    },\n                    lowBook: {\n                        id: this.state.sortedByAvg[0].best_book.id[\"$t\"],\n                        title: this.state.sortedByAvg[0].best_book.title,\n                        year: this.state.sortedByAvg[0].original_publication_year[\"$t\"],\n                        avgRating: this.state.sortedByAvg[0].average_rating,\n                        cover: this.state.sortedByAvg[0].best_book.img_url\n                    }\n                })\n            // pass highBook and lowBook to getDescAndUrl for more info\n            this.getDescAndUrl(this.state.highBook);\n            this.getDescAndUrl(this.state.lowBook);\n        })\n    }\n\n    // if the new search is different from the old search, then make another axios call and fire the whole process again\n    componentDidUpdate(prevProps){\n        if (this.props.authorSubmit !== prevProps.authorSubmit) {\n            this.getData(this.props.authorSubmit);\n        }\n    }\n\n    // method to get description and url from a different API request, called by handleSubmit\n    getDescAndUrl = (book) => {\n        // NEXT AXIOS TEST: find book description and url using id we got from other call\n        axios({\n            url: 'https://proxy.hackeryou.com',\n            dataResponse: 'json',\n            paramsSerializer: function (params) {\n                return Qs.stringify(params, { arrayFormat: 'brackets' })\n            },\n            params: {\n                reqUrl: `https://www.goodreads.com/book/show/${book.id}.xml`,\n                params: {\n                    key: 'dRJuutBqKWVrrJUND8jbmQ',\n                    text_only: false\n                },\n                proxyHeaders: {\n                    'header_params': 'value'\n                },\n                xmlToJSON: true\n            }\n        }).then(res => {\n            // take the lowest (first) and highest (last) rated books and set state\n            const desc = res.data.GoodreadsResponse.book[\"description\"]\n            const link = res.data.GoodreadsResponse.book.url\n            const ratings = res.data.GoodreadsResponse.book.ratings_count\n            const reviews = res.data.GoodreadsResponse.book.text_reviews_count\n            const talkScore = (reviews / ratings * 100).toFixed(2);\n\n            // if the book we pass to getDescAndUrl is highBook, then set the whole state of highBook, else set the state of lowBook\n            // CAN WE DO THIS ANOTHER WAY????\n            book === this.state.highBook ?\n                this.setState({\n                    highBook: {\n                        id: this.state.sortedByAvg[this.state.sortedByAvg.length - 1].best_book.id[\"$t\"],\n                        title: this.state.sortedByAvg[this.state.sortedByAvg.length - 1].best_book.title,\n                        year: this.state.sortedByAvg[this.state.sortedByAvg.length - 1].original_publication_year[\"$t\"],\n                        avgRating: this.state.sortedByAvg[this.state.sortedByAvg.length - 1].average_rating,\n                        cover: this.state.sortedByAvg[this.state.sortedByAvg.length - 1].best_book.img_url,\n                        url: link,\n                        description: desc,\n                        starRatingCount: ratings,\n                        textReviewCount: reviews,\n                        talkScore: talkScore\n                    }\n                }) :\n                this.setState({\n                    lowBook: {\n                        id: this.state.sortedByAvg[0].best_book.id[\"$t\"],\n                        title: this.state.sortedByAvg[0].best_book.title,\n                        year: this.state.sortedByAvg[0].original_publication_year[\"$t\"],\n                        avgRating: this.state.sortedByAvg[0].average_rating,\n                        cover: this.state.sortedByAvg[0].best_book.img_url,\n                        url: link,\n                        description: desc,\n                        starRatingCount: ratings,\n                        textReviewCount: reviews,\n                        talkScore: talkScore\n                    }\n                })\n        })\n    }\n\n    // a dynamic function for ALL handle clicks using e.target.id to update state\n    onClick = (e) => {        \n        this.setState({\n            [e.target.id]: !(this.state[e.target.id])\n        })  \n    }\n\n    // error handling for Chrome ?????\n    // onUnload() {\n\n    // }\n\n    render() {      \n        return(           \n            <div className=\"wrapper resultContainer clearfix\"> \n                <h2>Highest vs. Lowest Rated</h2>     \n                <div className=\"bookHero borderAccent\">\n                    <h3>Highest Rated</h3>\n\n                    <div className={(this.state.activeOne) ? 'flipper' : 'noFlipper'}>\n                        <div className=\"card\">\n                            <div className=\"front face\">          \n                                <div className=\"bookStats\">\n                                    <h4>{`${this.state.highBook.title}`}</h4> \n\n                                    <p> Year: <span>{`${this.state.highBook.year}`}</span></p>\n                                    <p> Average Rating: <span>{`${this.state.highBook.avgRating}`}</span></p>\n                                    <p> Number of Star Rating: <span>{`${this.state.highBook.starRatingCount}`}</span></p>\n                                    <p>Number of Text Reviews: <span>{`${this.state.highBook.textReviewCount}`}</span></p>     \n                                </div>\n\n                                <div className=\"talkScoreContainer clearfix\">\n                                    <div className=\"talkScore\" onClick={this.onClick} id=\"activeThree\" value={this.state.activeThree}>\n                                        <p>Talk Score:</p>\n                                        <p>{`${this.state.highBook.talkScore}`}</p>\n                                        <i className=\"fas fa-question\"></i>\n                                    </div>\n                                </div>\n\n                                <p className={(this.state.activeThree) ? \"show description\" : \"hidden description\"}>How much are readers discussing this book? This is the ratio of text reviews to starred ratings, multiplied by one hundred.</p>\n\n                                <button className=\"descriptionButton\" id=\"activeOne\" onClick={this.onClick}>Description</button>\n                            </div>\n\n                            <div onClick={this.onClick} className={(this.state.activeOne) ? 'noFlipper back face center' : 'flipper back face center'}>\n                                    <h4>Description: </h4>\n                                    <p className=\"description\" dangerouslySetInnerHTML={{ __html: this.state.highBook.description}}></p> \n                                    <button className=\"returnButton\" id=\"activeOne\" onClick={this.onClick}>Return</button>    \n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                {/* LOW BOOK */}\n                <div className=\"bookHero borderAccent\">\n                    <h3>Lowest Rated</h3>\n                    <div className={(this.state.activeTwo) ? 'flipper' : 'noFlipper'}>\n                        <div className=\"card\">\n                            <div className=\"front face\">\n                                <div className=\"bookStats\">\n                                    <h4>{`${this.state.lowBook.title}`}</h4>\n\n                                    <p> Year: <span>{`${this.state.lowBook.year}`}</span></p>\n                                    <p> Average Rating: <span>{`${this.state.lowBook.avgRating}`}</span></p>\n                                    <p> Number of Star Rating: <span>{`${this.state.lowBook.starRatingCount}`}</span></p>\n                                    <p>Number of Text Reviews: <span>{`${this.state.lowBook.textReviewCount}`}</span></p>  \n                                </div>\n                                <div className=\"talkScoreContainer clearfix\">\n                                    <div className={\"talkScore\"} onClick={this.onClick} id=\"activeFour\">\n                                        <p>Talk Score:</p>\n                                        <p>{`${this.state.lowBook.talkScore}`}</p>\n                                        <i className=\"fas fa-question\"></i>\n                                    </div>\n                                </div>\n\n                                <p className={(this.state.activeFour) ? \"show description\" : \"hidden description\"}>How much are readers discussing this book? This is the ratio of text reviews to starred ratings, multiplied by one hundred.</p>\n\n                                <button className=\"descriptionButton\" id=\"activeTwo\" onClick={this.onClick}>Description</button>\n                            </div>\n\n                             <div className={(this.state.activeTwo) ? 'noFlipper back face center' : 'flipper back face center'} onClick={this.onClickTwo}>\n                                <h4>Description: </h4>\n                                <p className=\"description\" dangerouslySetInnerHTML={{ __html: this.state.lowBook.description }}></p>\n                                <button className=\"returnButton\" id=\"activeTwo\" onClick={this.onClick}>Return</button>\n                            </div>\n                        </div> \n                    </div>\n                </div> \n                        \n                <div className=\"chartContainer\">\n                    <Chart years={this.state.yearsArray} ratings={this.state.ratingsArray} />\n                </div>\n\n                \n                <Link to={\"/\"} className=\"button\">Search again?</Link>\n           \n                                 \n            </div>\n        )\n    }\n}\nexport default withRouter(BookResults);","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link, withRouter } from 'react-router-dom';\nimport './App.css';\n\nclass Form extends Component {\n    \n    render() {\n        return (\n// taking in the handlesubmit from parent app.js, using a callback function to pass back in the history\n            <form onSubmit={(e)=> this.props.handleSubmit(e, this.props.history)} action=\"\">\n                <label className=\"visuallyhidden\" htmlFor=\"text\">Enter Author Name: </label>\n                <input className=\"searchField\" onChange={this.props.handleChange} value={this.props.authorSearch} type=\"text\" id=\"authorSearch\" placeholder=\"Enter author name\" required />\n                <input className=\"button\" type=\"submit\" value=\"SEARCH\"/>\n            </form>\n        )\n    }\n\n}\n\n//using withrouter to export the form with history\nexport default withRouter(Form);","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport './App.css';\nimport './App.scss';\nimport BookResults from './BookResults.js';\nimport Form from './Form.js';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = ({\n      authorSearch: \"\",\n      authorSubmit: \"\"\n    })\n  }\n\n  // handling on change input - updating our state of authorSearch\n  handleChange = (e) => {\n    this.setState({\n      [e.target.id]: e.target.value\n    })\n  }\n\n  //handlesubmit now takes 2 parameters, the event and history\n  handleSubmit = (e, history) => {\n    e.preventDefault();\n    history.push(\"/bookresults\");\n    this.setState({\n     authorSubmit: this.state.authorSearch\n    })\n \n  }\n  \n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"wrapper\">\n            <header className=\"mainHeader\">\n              <h1 className=\"title animated flipInX delay-0.7s\">VERSVS</h1>\n              <p class=\"introCopy\">Compare your favourite author's highest and lowest rated books. See where they peaked and plunged throughout their literary career.</p>\n              <Form handleSubmit={this.handleSubmit} handleChange={this.handleChange} authorSearch={this.state.authorSearch} /> \n            </header>\n          \n          </div>\n\n\n            <div className=\"wrapper\">\n              <Route path=\"/bookresults\" render={() => \n              <BookResults authorSubmit={this.state.authorSubmit} />} />       \n            </div>                           \n\n          <footer>\n            <p>SabreHawk <span>&</span> Baggins est. 2018</p>\n            <p className=\"attribution\">Made with the  <a href=\"https://www.goodreads.com/\">Goodreads</a> API</p>\n          </footer>\n        </div>\n      </Router>\n    );\n  };\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}